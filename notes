Chapter 1 Building Abstractions with Procedures

Human understanding
    Combine
    Compare
    Abstract

computational process, data, program, programming language
bugs, glitches, debug
Lisp, LISt Processing, 1950s, John McCarthy, recursion equations, interpreter
Scheme

1.1  The Elements of Programming

                      data            procedures
primitive expressions 1 2             + -
means of combination  (1 2)           (+ 1 2)
means of abstraction  (define size 1) (define sum(x y) (+ x y))

combination = (operator operands...)
value = (operator arguments...)
prefix notation: no ambiguity, nested
pretty-printing
read-eval-print loop

(define variable value) special form
global environment

recursive
tree accumulation
combination vs special form
procedure definition: (define (<name> <formal parameters>) <body>) special form
compound procedure

substitution model
applicative order vs normal order

case analysis
(cond (<p1> <e1>) special form
      (<p2> <e2>)
      (<pn> <en>))
clause: (<p> <e>)
predicate
(if <predicate> <consequent> <alternative>) special form
logical composition operations:
    (and <e1> ... <en>) special form
    (or <e1> ... <en>) special form
    (not <e>) ordinary precedure

mathematical functions vs computer procedures: procedures must be effective
properties (what) vs how
declarative knowledge vs imperative knowledge

recursive
procedure
    accomplishes an identifiable task
    suppress detail
    independent of the parameter names
free vs bound variable, scope, capture

block structure
lexical scoping

1.2 Procedures and the Processes They Generate

A procedure is a pattern for the local evolution of a computational process.

deferred operations, recursive process, linear recursive process
state variables, iterative process, linear iterative process
recursive process vs recursive procedure
tail-recursive

tree recursion
